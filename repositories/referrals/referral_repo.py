from aiogram import Bot
from db.db import database
from utils.timezones import get_current_time
from handlers.achievements import check_and_grant
from handlers.texts.notifications_texts import JOIN_MESSAGES
import random
import logging

logger = logging.getLogger(__name__)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–µ: –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–±–æ—Ä —è–∑—ã–∫–∞ ---
def _normalize_lang(lang: str | None) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –æ–¥–Ω–æ–º—É –∏–∑ –∫–ª—é—á–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π."""
    if not lang:
        return "ru"
    lang = lang.lower()
    if lang in {"ru", "en", "uk", "ua"}:
        return lang
    return "ru"

def _pick_lang_for_messages(lang: str) -> str:
    """
    –ü–æ–¥–±–∏—Ä–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–π –∫–ª—é—á –≤ JOIN_MESSAGES —Å —Ñ–æ–ª–±—ç–∫–∞–º–∏.
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç 'uk' –∏ 'ua' –∫–∞–∫ –≤–∑–∞–∏–º–æ–∑–∞–º–µ–Ω—è–µ–º—ã–µ, –∑–∞—Ç–µ–º ru -> en.
    """
    candidates = [lang]
    if lang == "uk":
        candidates.append("ua")
    elif lang == "ua":
        candidates.append("uk")
    candidates += ["ru", "en"]

    for key in candidates:
        if key in JOIN_MESSAGES:
            return key
    # –ù–∞ –≤—Å—è–∫–∏–π ‚Äî –≤–µ—Ä–Ω—ë–º –ª—é–±–æ–π –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
    return next(iter(JOIN_MESSAGES.keys()))

async def _get_user_language(user_id: int) -> str:
    row = await database.fetch_one(
        "SELECT language FROM users WHERE user_id = :uid",
        {"uid": user_id}
    )
    lang = _normalize_lang(row["language"] if row else None)
    key = _pick_lang_for_messages(lang)
    if key != lang:
        logger.info(f"[REFERRAL][LANG] Requested '{lang}', using '{key}' (fallback).")
    return key

async def save_referral(referrer_id: int, invited_id: int, bot: Bot):
    if referrer_id == invited_id:
        logger.info(f"[REFERRAL] ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {invited_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å —Å–∞–º —Å–µ–±—è")
        return

    existing = await database.fetch_one(
        "SELECT 1 FROM referrals WHERE invited_id = :invited_id",
        {"invited_id": invited_id}
    )
    if existing:
        logger.info(f"[REFERRAL] ‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {invited_id} —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ ‚Äî –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ")
        return

    query = """
        INSERT INTO referrals (referrer_id, invited_id, created_at)
        VALUES (:referrer_id, :invited_id, :created_at)
    """
    values = {
        "referrer_id": referrer_id,
        "invited_id": invited_id,
        "created_at": get_current_time()
    }
    await database.execute(query=query, values=values)

    # === –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ ===
    total_referrals = await database.fetch_val(
        "SELECT COUNT(*) FROM referrals WHERE referrer_id = :uid",
        {"uid": referrer_id}
    )
    await check_and_grant(referrer_id, "invite", total_referrals, bot)

    # === –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ===
    try:
        invited_user = await bot.get_chat(invited_id)

        # –Ø–∑—ã–∫ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ
        lang_key = await _get_user_language(referrer_id)
        templates = JOIN_MESSAGES.get(lang_key) or JOIN_MESSAGES.get("ru") or []
        if not templates:
            # –ù–∞ –∫—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π, —á—Ç–æ–±—ã –Ω–µ —É–ø–∞—Å—Ç—å
            templates = ["üî• –ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫: <b>{name}</b>"]

        msg = random.choice(templates).format(name=invited_user.full_name)
        await bot.send_message(referrer_id, msg, parse_mode="HTML")
        logger.info(
            f"[REFERRAL] –£–≤–µ–¥–æ–º–∏–ª–∏ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ {referrer_id} –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {invited_id} (lang={lang_key})"
        )
    except Exception as e:
        logger.warning(f"[REFERRAL] –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ: {e}")

    logger.info(f"[REFERRAL] ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å–≤—è–∑—å: {referrer_id} ‚Üí {invited_id}")


async def get_referral_stats(referrer_id: int) -> tuple[int, int]:
    total_row = await database.fetch_one(
        "SELECT COUNT(*) as count FROM referrals WHERE referrer_id = :referrer_id",
        {"referrer_id": referrer_id}
    )
    active_row = await database.fetch_one(
        "SELECT COUNT(*) as count FROM referrals WHERE referrer_id = :referrer_id AND is_active = TRUE",
        {"referrer_id": referrer_id}
    )
    return (total_row["count"] if total_row else 0,
            active_row["count"] if active_row else 0)


async def get_referrer_id(invited_id: int):
    return await database.fetch_one(
        "SELECT referrer_id FROM referrals WHERE invited_id = :invited_id",
        {"invited_id": invited_id}
    )
