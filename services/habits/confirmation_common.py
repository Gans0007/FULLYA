import random
from repositories.habits.habit_repo import get_habit_by_id
from services.confirmations.confirmation_service import process_confirmation, send_to_public_chat
from services.challenge_service.complete_challenge import complete_challenge
from services.profile import xp_service
from handlers.texts.notifications_texts import CONFIRM_MESSAGES, SPECIAL_REWARD_MESSAGE
from db.db import database


async def confirm_media_habit(user, habit_id: int, file_id: str, file_type: str, bot):
    """
    –û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏ —á–µ—Ä–µ–∑ –º–µ–¥–∏–∞.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏, –∏ –¥–ª—è –∞–≤—Ç–æ-–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
    """
    habit = await get_habit_by_id(habit_id)
    if not habit:
        return "‚ùå –ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è wake_time
    if habit.confirm_type == "wake_time":
        from services.habits.habit_confirmation_service import check_wake_time
        ok, error = await check_wake_time(habit.name)
        if not ok:
            return error

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    progress_increased = await process_confirmation(
        user_id=user.id,
        habit_id=habit_id,
        file_id=file_id,
        file_type=file_type,
        bot=bot
    )

    # --- –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –ø–∞–±–ª–∏–∫-—á–∞—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö ---
    should_share = await database.fetch_val(
        "SELECT share_confirmation_media FROM users WHERE user_id = :uid",
        {"uid": user.id}
    )
    if should_share is None:
        should_share = True  # fallback –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    if should_share and file_id and file_type:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ø–∞–±–ª–∏–∫-—á–∞—Ç (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
        await send_to_public_chat(
            user=user,
            habit_id=habit_id,
            file_id=file_id,
            file_type=file_type,
            bot=bot
        )

    if progress_increased:
        # +1 XP
        await xp_service.xp_for_confirmation(user.id, bot)
        await bot.send_message(user.id, "üèµ +1 XP –∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏!")

        habit = await get_habit_by_id(habit_id)
        if habit.is_challenge and int(habit.done_days) >= int(habit.days):
            await complete_challenge(habit_id, user.id, bot)
            await xp_service.xp_for_completed_challenge(user.id, bot)
            await bot.send_message(user.id, "üèµ +5 XP –∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–µ–ª–ª–µ–Ω–¥–∂–∞!")

            from handlers.achievements import check_and_grant
            finished_challenges = await database.fetch_val(
                "SELECT finished_challenges FROM users WHERE user_id = :uid",
                {"uid": user.id}
            )
            await check_and_grant(user.id, "challenge_done", finished_challenges, bot)

        # --- –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–æ–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ---
        user_data = await database.fetch_one(
            """
            SELECT active_days, special_reward, notification_tone, language 
            FROM users 
            WHERE user_id = :uid
            """,
            {"uid": user.id}
        )

        if user_data:
            active_days = user_data["active_days"]
            special_reward = user_data["special_reward"]
            tone = user_data["notification_tone"] or "mixed"
            lang = user_data["language"] or "ru"

            # special reward
            if active_days == 31 and not special_reward:
                await database.execute(
                    "UPDATE users SET special_reward = TRUE WHERE user_id = :uid",
                    {"uid": user.id}
                )
                await bot.send_message(
                    user.id,
                    SPECIAL_REWARD_MESSAGE.get(lang, SPECIAL_REWARD_MESSAGE["ru"])
                )

            # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ
            return random.choice(
                CONFIRM_MESSAGES.get(tone, CONFIRM_MESSAGES["mixed"]).get(lang, CONFIRM_MESSAGES["mixed"]["ru"])
            )

    else:
        return "‚ôªÔ∏è –ú–µ–¥–∏–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ! –ü—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ –∏–∑–º–µ–Ω—ë–Ω."

