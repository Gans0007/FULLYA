from db.db import database
from services.profile.profile_service import get_liga_by_xp, get_lang
from handlers.texts.achievements_texts import LIGAS as LIGAS_TEXTS
from handlers.achievements import check_and_grant


async def add_xp(user_id: int, amount: int, bot, reason: str = ""):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è XP.
    1) –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç XP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    2) –õ–æ–≥–∏—Ä—É–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –≤ reward_history.
    3) –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏–≥—É –ø–æ —Ç–µ–∫—É—â–µ–º—É —è–∑—ã–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    4) –í—ã–¥–∞—ë—Ç –∞—á–∏–≤–∫—É –∑–∞ –Ω–æ–≤—É—é –ª–∏–≥—É (–ª–∏—à—å —Å 2-–π –∏ –≤—ã—à–µ).
    """
    if amount <= 0:
        return None

    # 1) –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º XP –∏ –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    new_xp = await database.fetch_val(
        """
        UPDATE users
        SET xp_balance = xp_balance + :amount
        WHERE user_id = :uid
        RETURNING xp_balance
        """,
        {"uid": user_id, "amount": amount}
    )
    if new_xp is None:
        return None

    # 2) –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –≤ reward_history
    await database.execute(
        """
        INSERT INTO reward_history (user_id, amount, type, reason)
        VALUES (:user_id, :amount, 'xp', :reason)
        """,
        {"user_id": user_id, "amount": amount, "reason": reason or "xp_reward"}
    )

    # 3) –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –∏ –Ω–∞–±–æ—Ä –ª–∏–≥
    lang = await get_lang(user_id)
    ligas = LIGAS_TEXTS.get(lang, LIGAS_TEXTS["ru"])

    # (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ª–∏–≥—É/—Ü–∏—Ç–∞—Ç—É ‚Äî –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –≥–¥–µ-—Ç–æ –¥–∞–ª–µ–µ
    liga_name, emoji, liga_quote, _ = get_liga_by_xp(new_xp, lang)

    # 4) –ù–∞—Ö–æ–¥–∏–º, –≤ –∫–∞–∫—É—é –ª–∏–≥—É –ø–æ–ø–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –≤—ã–¥–∞—ë–º –∞—á–∏–≤–∫—É
    # –ò–Ω–¥–µ–∫—Å 0 = ¬´–ù–∞—á–∏–Ω–∞—é—â–∏–π¬ª (–Ω–µ—Ç –∞—á–∏–≤–∫–∏), –∏–Ω–¥–µ–∫—Å 1 = 2-—è –ª–∏–≥–∞ (–µ—Å—Ç—å –∞—á–∏–≤–∫–∞)
    for idx, (low, high, name, _, _) in enumerate(ligas):
        if low <= new_xp <= high:
            if idx >= 1:
                league_num = idx + 1  # idx=1 -> 2-—è –ª–∏–≥–∞, ..., idx=9 -> 10-—è –ª–∏–≥–∞
                await check_and_grant(user_id, "league", league_num, bot)
            break

    return new_xp


# === USDT-–Ω–∞–≥—Ä–∞–¥—ã ===

async def add_usdt(user_id: int, amount: float = 1.0, reason: str = "referral_paid"):
    """
    –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ USDT –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ reward_history.
    """
    if amount <= 0:
        return None

    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
    await database.execute(
        """
        UPDATE users
        SET usdt_balance = usdt_balance + :amount
        WHERE user_id = :user_id
        """,
        {"user_id": user_id, "amount": amount}
    )

    # –õ–æ–≥–∏—Ä—É–µ–º –≤ reward_history
    await database.execute(
        """
        INSERT INTO reward_history (user_id, amount, type, reason)
        VALUES (:user_id, :amount, 'usdt', :reason)
        """,
        {"user_id": user_id, "amount": amount, "reason": reason}
    )

    return amount


# === –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π ===

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –ø—Ä–∏–≤—ã—á–∫–∏ +1 XP üèµ
async def xp_for_confirmation(user_id: int, bot):
    return await add_xp(user_id, 1, bot, reason="habit_confirmation")

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ +5 XP üèµ
async def xp_for_completed_habit(user_id: int, bot):
    return await add_xp(user_id, 5, bot, reason="habit_completed")

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–µ–ª–ª–µ–Ω–¥–∂–∞ +5 XP üèµ
async def xp_for_completed_challenge(user_id: int, bot):
    return await add_xp(user_id, 5, bot, reason="challenge_completed")

# –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ +2 üèµ
async def xp_for_extend_habit(user_id: int, bot):
    return await add_xp(user_id, 2, bot, reason="habit_extended")

# –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è +2 XP
async def xp_for_achievement(user_id: int, bot):
    # —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤
    return await add_xp(user_id, 2, bot, reason="achievement")

# –ó–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ +1 XP
async def xp_for_referral(user_id: int, bot):
    return await add_xp(user_id, 1, bot, reason="referral")
