from aiogram import Router, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from config import ADMIN_ID
from keyboards.monetization import get_main_monetization_menu
from db.db import database  # –¥–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î
import logging


router = Router()


@router.message(F.text == "üì• –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è")
async def handle_full_version(message: types.Message):
    import logging
    logging.getLogger(__name__).info(
        f"[DEBUG] –ö–Ω–æ–ø–∫–∞ '–ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è' –Ω–∞–∂–∞—Ç–∞. text={repr(message.text)}, user_id={message.from_user.id}"
    )

    # –ü–æ–ª—É—á–∞–µ–º XP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    query = "SELECT xp_balance FROM users WHERE user_id = :user_id"
    row = await database.fetch_one(query, {"user_id": message.from_user.id})
    xp = row[0] if row else 0

    # –¢–µ–∫—Å—Ç —Å —ç–º–æ–¥–∑–∏ –∏ –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–æ–π xp
    text = (
        "üîì <b>YOUR AMBITIONS ‚Äî –±–æ–ª—å—à–µ, —á–µ–º –±–æ—Ç</b>\n"
        "–≠—Ç–æ <b>—Ç–≤–æ—è —Å–æ—Ü–∏–∞–ª—å–Ω–∞—è —Å–µ—Ç—å</b>, –µ—Å–ª–∏ —Ç—ã:\n\n"
        "‚Ä¢  –•–æ—á–µ—à—å –≤—ã—Ä–∞–±–æ—Ç–∞—Ç—å <b>—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏</b>\n"
        "‚Ä¢  –ò—â–µ—à—å <b>–µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤ –∏ —Å–∏–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ</b>\n"
        "‚Ä¢  –ß—ë—Ç–∫–æ –≤–∏–¥–∏—à—å —Ü–µ–ª—å, –Ω–æ —á—É–≤—Å—Ç–≤—É–µ—à—å, —á—Ç–æ –¥–ª—è —Ä—ã–≤–∫–∞ —á–µ–≥–æ‚Äë—Ç–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç\n\n"
        "‚ö° <b>–°–ï–ô–ß–ê–° –¢–í–û–ô –®–ê–ù–°</b>\n"
        "–° 60 —Ö—Ä ‚Äî <b>—Å–∫–∏–¥–∫–∞ 30%</b> –Ω–∞ –ø–æ–ª–Ω—É—é –≤–µ—Ä—Å–∏—é!\n"
        f"–£ —Ç–µ–±—è —Å–µ–π—á–∞—Å ‚Äî <b>{xp} —Ö—Ä</b>.\n\n"
        "–ß—Ç–æ –¥–∞—ë—Ç <b>–ø–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è?</b>\n"
        "üöÄ <b>–ë–µ–∑–ª–∏–º–∏—Ç</b> –Ω–∞ –ø—Ä–∏–≤—ã—á–∫–∏ –∏ —á–µ–ª–ª–µ–Ω–¥–∂–∏\n"
        "üí∏ <b>–ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã</b> –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n"
        "üèÜ <b>–¢–æ–ø‚Äë10 –ª—É—á—à–∏—Ö</b> –≤ –º–∏—Ä–µ –∏–ª–∏ —Å—Ä–µ–¥–∏ –¥—Ä—É–∑–µ–π\n"
        "üîí <b>–ó–∞–∫—Ä—ã—Ç—ã–π —á–∞—Ç VIP‚Äë—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</b>\n"
        "üë§ <b>–ü—Ä–æ—Ñ–∏–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</b> ‚Äî —Å–º–æ—Ç—Ä–∏, –∫—Ç–æ —Ä—è–¥–æ–º —Å —Ç–æ–±–æ–π\n"
        "üìÖ –õ–∏—á–Ω—ã–µ <b>–∑–∞–º–µ—Ç–∫–∏, –º–µ—á—Ç—ã, —Ü–µ–ª–∏, –ø–ª–∞–Ω—ã</b> —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏\n"
        "üìä <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å</b>\n"
        "ü•á <b>–õ–∏–≥–∏, —É—Ä–æ–≤–Ω–∏, –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è</b>\n"
        "üéÅ <b>–§–∏–∑–∏—á–µ—Å–∫–∏–µ –Ω–∞–≥—Ä–∞–¥—ã</b> –æ—Ç –∫–æ–º–∞–Ω–¥—ã <b>Your Ambitions</b>\n\n"
        "–¢–µ–±–µ –Ω–µ –Ω—É–∂–Ω—ã —á—É–¥–µ—Å–∞.\n"
        "–¢–µ–±–µ –Ω—É–∂–µ–Ω <b>–ø—Ä–æ–≥—Ä–µ—Å—Å</b>.\n\n"
        "<b>–¢—ã –≤ –∏–≥—Ä–µ? üî•</b>"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üî• –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø", callback_data="full_access_coming_soon")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="monetization_back")]
    ])

    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")


@router.callback_query(F.data == "full_access_coming_soon")
async def handle_full_access_coming_soon(callback: CallbackQuery):
    await callback.answer("‚è≥ –°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ!", show_alert=True)

@router.message(F.photo)
async def handle_photo(message: types.Message):
    # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É —Ñ–æ—Ç–æ
    photo = message.photo[-1]
    file_id = photo.file_id

    logging.getLogger(__name__).info(f"[PHOTO] file_id={file_id} from user_id={message.from_user.id}")
    print(f"[PHOTO] file_id={file_id} from user_id={message.from_user.id}")  # –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø—Ä—è–º–æ –≤ –∫–æ–Ω—Å–æ–ª—å

    await message.answer(f"ID —ç—Ç–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:\n<code>{file_id}</code>", parse_mode="HTML")