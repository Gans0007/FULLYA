from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
import logging

from services.habits.habit_auto_confirmation_service import list_media_habits
from services.habits.confirmation_common import confirm_media_habit  # –∑–∞–º–µ–Ω–∏–ª–∏ –∏–º–ø–æ—Ä—Ç

logger = logging.getLogger(__name__)
router = Router()

# üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ –±–µ–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
@router.message(F.photo | F.video | F.video_note)
async def handle_media_no_state(message: Message, state: FSMContext):
    if message.chat.type != "private":
        return

    user_id = message.from_user.id
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ–¥–∏–∞
    if message.photo:
        file_id, file_type = message.photo[-1].file_id, "photo"
    elif message.video:
        file_id, file_type = message.video.file_id, "video"
    elif message.video_note:
        file_id, file_type = message.video_note.file_id, "video_note"
    else:
        await message.answer("‚ùå –¢–∏–ø –º–µ–¥–∏–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω.")
        return

    await state.update_data(file_id=file_id, file_type=file_type)

    try:
        media_habits = await list_media_habits(user_id)
        if not media_habits:
            await message.answer("üòê –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —á–µ—Ä–µ–∑ –º–µ–¥–∏–∞.")
            return

        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text=name, callback_data=f"select_habit_{hid}")]
                for hid, name in media_habits
            ]
        )

        await message.answer("–í—ã–±–µ—Ä–∏, –¥–ª—è –∫–∞–∫–æ–π –ø—Ä–∏–≤—ã—á–∫–∏ —ç—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ:", reply_markup=keyboard)
    except Exception as e:
        logger.exception(f"[{user_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ–¥–∏–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ–¥–∏–∞.")
        await state.clear()


@router.callback_query(F.data.startswith("select_habit_"))
async def handle_habit_selection(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    data = await state.get_data()
    file_id = data.get("file_id")
    file_type = data.get("file_type")

    if not file_id or not file_type:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –º–µ–¥–∏–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–Ω–æ–≤–∞.")
        await state.clear()
        return

    habit_id = int(callback.data.split("_")[-1])

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é confirm_media_habit –≤–º–µ—Å—Ç–æ confirm_selected_habit
    result_text = await confirm_media_habit(
        user=callback.from_user,
        habit_id=habit_id,
        file_id=file_id,
        file_type=file_type,
        bot=callback.bot,
    )

    logger.info(f"[AUTO-CONFIRM] user_id={user_id}, habit_id={habit_id}, result={result_text}")
    await callback.message.answer(result_text)
    await callback.answer()
    await state.clear()
