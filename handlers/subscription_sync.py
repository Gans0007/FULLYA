import logging
from datetime import datetime, timedelta
from random import choice

from aiogram import Router, Bot
from aiogram.types import ChatMemberUpdated
from aiogram.exceptions import TelegramBadRequest

from repositories.profiles.profile_repository import update_payment_status, get_user
from repositories.referrals.referral_repo import get_referrer_id
from services.profile.xp_service import add_usdt  # ‚úÖ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ USDT
from handlers.texts.notifications_texts import PAID_REFERRAL_MESSAGES
import config

router = Router()
logger = logging.getLogger(__name__)

SUBSCRIPTION_DAYS = 30

@router.chat_member()
async def sync_subscription(event: ChatMemberUpdated, bot: Bot):
    user_id = event.new_chat_member.user.id
    chat_id = event.chat.id
    new_status = event.new_chat_member.status

    if chat_id == config.PUBLIC_CHANNEL_ID:
        now = datetime.utcnow()

        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—à—ë–ª (–Ω–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞ –∏–ª–∏ –∞–≤—Ç–æ–æ–ø–ª–∞—Ç–∞)
        if new_status == "member":
            user = await get_user(user_id)
            if user:
                user_data = dict(user)
                payment_date = user_data.get("payment_date")
                is_paid = user_data.get("is_paid", False)

                if not is_paid or (payment_date and payment_date + timedelta(days=SUBSCRIPTION_DAYS) < now):
                    logger.info(f"[SYNC] {user_id} –≤–æ—à—ë–ª –≤ –∫–∞–Ω–∞–ª ‚Äî –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É (–Ω–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞)")
                    await update_payment_status(user_id, True)

                    # üî• –ù–∞—á–∏—Å–ª—è–µ–º 1 USDT —Ä–µ—Ñ–µ—Ä–µ—Ä—É, –µ—Å–ª–∏ –µ—Å—Ç—å
                    ref_row = await get_referrer_id(user_id)
                    if ref_row:
                        referrer_id = ref_row["referrer_id"]

                        await add_usdt(referrer_id, amount=1.0, reason="referral_paid")
                        logger.info(f"[REFERRAL USDT] –ù–∞—á–∏—Å–ª–µ–Ω 1 USDT –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É {referrer_id} –∑–∞ –æ–ø–ª–∞—Ç—É {user_id}")

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É
                        full_name = user_data.get("full_name", "–ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫")

                        text = choice(PAID_REFERRAL_MESSAGES).format(name=full_name)

                        try:
                            await bot.send_message(referrer_id, text, parse_mode="HTML")
                            logger.info(f"[REFERRAL] –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–ª–∞—Ç–µ–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {referrer_id}")
                        except TelegramBadRequest as e:
                            logger.warning(f"[REFERRAL] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {referrer_id}: {e}")
                else:
                    logger.info(f"[SYNC] {user_id} –≤–æ—à—ë–ª –≤ –∫–∞–Ω–∞–ª ‚Äî –ø–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞, –¥–∞—Ç—É –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º")
            else:
                logger.info(f"[SYNC] {user_id} –≤–æ—à—ë–ª –≤ –∫–∞–Ω–∞–ª ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É")
                await update_payment_status(user_id, True)

        elif new_status == "kicked":
            logger.info(f"[SYNC] {user_id} –∫–∏–∫–Ω—É—Ç —Ç—Ä–∏–±—É—Ç–æ–º ‚Äî –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å")
            await update_payment_status(user_id, False)

            try:
                await bot.ban_chat_member(config.PUBLIC_CHAT_ID, user_id)
                await bot.unban_chat_member(config.PUBLIC_CHAT_ID, user_id)
                logger.info(f"[SYNC] {user_id} —É–¥–∞–ª—ë–Ω –∏–∑ —á–∞—Ç–∞ 2")
            except Exception as e:
                logger.error(f"[SYNC] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {user_id} –∏–∑ —á–∞—Ç–∞ 2: {e}")

        elif new_status == "left":
            user = await get_user(user_id)
            if user:
                user_data = dict(user)
                payment_date = user_data.get("payment_date")
                if payment_date:
                    expire_date = payment_date + timedelta(days=SUBSCRIPTION_DAYS)
                    if now >= expire_date:
                        logger.info(f"[SYNC] {user_id} –≤—ã—à–µ–ª –∏ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å—Ç—ë–∫ ({expire_date}) ‚Äî –æ—Ç–∫–ª—é—á–∞–µ–º")
                        await update_payment_status(user_id, False)
                        try:
                            await bot.ban_chat_member(config.PUBLIC_CHAT_ID, user_id)
                            await bot.unban_chat_member(config.PUBLIC_CHAT_ID, user_id)
                            logger.info(f"[SYNC] {user_id} —É–¥–∞–ª—ë–Ω –∏–∑ —á–∞—Ç–∞ 2")
                        except Exception as e:
                            logger.error(f"[SYNC] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {user_id} –∏–∑ —á–∞—Ç–∞ 2: {e}")
                    else:
                        logger.info(f"[SYNC] {user_id} –≤—ã—à–µ–ª, –Ω–æ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –µ—â—ë –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ {expire_date}. –î–æ—Å—Ç—É–ø —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è.")
                else:
                    logger.info(f"[SYNC] {user_id} –≤—ã—à–µ–ª, –Ω–æ –≤ –±–∞–∑–µ –Ω–µ—Ç payment_date ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º")
