import logging
from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from utils.ui import try_edit_message, safe_replace_message
from db.db import database
from handlers.texts.dreams_texts import GOALS_VIEW_TEXTS

logger = logging.getLogger(__name__)
router = Router()


async def get_lang(user_id: int) -> str:
    try:
        row = await database.fetch_one("SELECT language FROM users WHERE user_id = :uid", {"uid": user_id})
        lang = row["language"] if row and row["language"] in GOALS_VIEW_TEXTS else "ru"
        logger.debug(f"[GOALS] –Ø–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {lang}")
        return lang
    except Exception as e:
        logger.exception(f"[GOALS] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return "ru"


# üéØ –ú–æ–∏ —Ü–µ–ª–∏
@router.callback_query(F.data == "view_goals")
async def view_goals(callback: CallbackQuery):
    user_id = callback.from_user.id
    logger.info(f"[GOALS] ‚ñ∂Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫—Ä—ã–ª —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π")

    try:
        lang = await get_lang(user_id)
        text_data = GOALS_VIEW_TEXTS[lang]

        goals = await database.fetch_all(
            "SELECT text, is_done FROM goals WHERE user_id = :uid",
            {"uid": user_id}
        )

        if not goals:
            logger.info(f"[GOALS] –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ—Ç —Ü–µ–ª–µ–π")
            await callback.answer(text_data["no_goals"])
            return

        logger.info(f"[GOALS] –ù–∞–π–¥–µ–Ω–æ {len(goals)} —Ü–µ–ª–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        text = text_data["title"]
        for g in goals:
            status = text_data["status_done"] if g["is_done"] else text_data["status_active"]
            text += f"‚Ä¢ {g['text']} ‚Äî {status}\n"

        markup = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text=text_data["complete_button"], callback_data="choose_goal_to_complete"),
                InlineKeyboardButton(text=text_data["delete_button"], callback_data="choose_goal_to_delete")
            ],
            [
                InlineKeyboardButton(text=text_data["edit_button"], callback_data="choose_goal_to_edit"),
                InlineKeyboardButton(text=text_data["back_button"], callback_data="back_to_dreams_plans_menu")
            ]
        ])

        await safe_replace_message(callback.message, text, reply_markup=markup, parse_mode="HTML")
        await callback.answer()

    except Exception as e:
        logger.exception(f"[GOALS] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ü–µ–ª–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ü–µ–ª–µ–π.")


# ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ü–µ–ª–∏
@router.callback_query(F.data.startswith("complete_goal_"))
async def complete_goal(callback: CallbackQuery):
    user_id = callback.from_user.id
    goal_id = int(callback.data.split("_")[-1])
    logger.info(f"[GOALS] ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ü–µ–ª—å ID={goal_id}")

    try:
        lang = await get_lang(user_id)
        text_data = GOALS_VIEW_TEXTS[lang]

        await database.execute(
            "UPDATE goals SET is_done = true, done_at = NOW() WHERE id = :id",
            {"id": goal_id}
        )

        await try_edit_message(callback, text=text_data["goal_completed"])
        await callback.answer(text_data["goal_completed_alert"])

    except Exception as e:
        logger.exception(f"[GOALS] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ü–µ–ª–∏ ID={goal_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}: {e}")
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ü–µ–ª—å.")


# üìã –í—ã–±–æ—Ä —Ü–µ–ª–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
@router.callback_query(F.data == "choose_goal_to_complete")
async def choose_goal_to_complete(callback: CallbackQuery):
    user_id = callback.from_user.id
    logger.info(f"[GOALS] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±–∏—Ä–∞–µ—Ç —Ü–µ–ª—å –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")

    try:
        lang = await get_lang(user_id)
        text_data = GOALS_VIEW_TEXTS[lang]

        goals = await database.fetch_all(
            "SELECT id, text FROM goals WHERE user_id = :uid AND is_done = false",
            {"uid": user_id}
        )

        if not goals:
            logger.info(f"[GOALS] –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π")
            await callback.answer(text_data["no_active_goals"])
            return

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=g["text"], callback_data=f"complete_goal_{g['id']}")]
            for g in goals
        ])

        await try_edit_message(callback, text=text_data["choose_goal_to_complete"], markup=keyboard)
        await callback.answer()

    except Exception as e:
        logger.exception(f"[GOALS] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ü–µ–ª–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ü–µ–ª–∏.")


# ‚ùå –í—ã–±–æ—Ä —Ü–µ–ª–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
@router.callback_query(F.data == "choose_goal_to_delete")
async def choose_goal_to_delete(callback: CallbackQuery):
    user_id = callback.from_user.id
    logger.info(f"[GOALS] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±–∏—Ä–∞–µ—Ç —Ü–µ–ª—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")

    try:
        lang = await get_lang(user_id)
        text_data = GOALS_VIEW_TEXTS[lang]

        goals = await database.fetch_all(
            "SELECT id, text FROM goals WHERE user_id = :uid",
            {"uid": user_id}
        )

        if not goals:
            logger.info(f"[GOALS] –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ—Ç —Ü–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            await callback.answer(text_data["no_goals_to_delete"])
            return

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=g["text"], callback_data=f"confirm_delete_goal_{g['id']}")]
            for g in goals
        ])

        await try_edit_message(callback, text=text_data["choose_goal_to_delete"], markup=keyboard)
        await callback.answer()

    except Exception as e:
        logger.exception(f"[GOALS] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ü–µ–ª–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ü–µ–ª–µ–π.")


# ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ü–µ–ª–∏
@router.callback_query(F.data.startswith("confirm_delete_goal_"))
async def delete_goal(callback: CallbackQuery):
    user_id = callback.from_user.id
    goal_id = int(callback.data.split("_")[-1])
    logger.info(f"[GOALS] üóë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª—è–µ—Ç —Ü–µ–ª—å ID={goal_id}")

    try:
        lang = await get_lang(user_id)
        text_data = GOALS_VIEW_TEXTS[lang]

        await database.execute("DELETE FROM goals WHERE id = :id", {"id": goal_id})
        await try_edit_message(callback, text=text_data["goal_deleted"])
        await callback.answer(text_data["goal_deleted_alert"])

    except Exception as e:
        logger.critical(f"[GOALS] ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê —É–¥–∞–ª–µ–Ω–∏—è —Ü–µ–ª–∏ ID={goal_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ü–µ–ª–∏.")
