import logging
from db.db import database
from handlers.texts.achievements_texts import ACHIEVEMENTS_TEXTS, HEADERS  # ‚úÖ –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏

logger = logging.getLogger(__name__)

# ----------------- helpers -----------------

async def _get_user_lang(user_id: int) -> str:
    """
    –ë–µ—Ä—ë–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ users.language.
    –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏ –¥–µ–ª–∞–µ–º —É–º–Ω—ã–µ —Ñ–æ–ª–±—ç–∫–∏ (ua->uk, ru-RU->ru –∏ —Ç.–ø.).
    –ü–æ—Ä—è–¥–æ–∫ —Ñ–æ–ª–±—ç–∫–æ–≤: user -> ru -> uk -> en -> –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π.
    """
    lang = await database.fetch_val(
        "SELECT language FROM users WHERE user_id = :uid",
        {"uid": user_id}
    )
    lang = (lang or "").strip().lower()

    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
    if lang.startswith("ua"):
        lang = "uk"
    if lang.startswith(("ru", "uk", "en")):
        lang = lang[:2]

    if lang in ACHIEVEMENTS_TEXTS:
        return lang

    for candidate in ("ru", "uk", "en"):
        if candidate in ACHIEVEMENTS_TEXTS:
            return candidate

    # –°–æ–≤—Å–µ–º –∫—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π
    return next(iter(ACHIEVEMENTS_TEXTS.keys()))


def _get_text_for(code: str, lang: str) -> str | None:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ –∫–æ–¥—É —Å –∫–∞—Å–∫–∞–¥–Ω—ã–º —Ñ–æ–ª–±—ç–∫–æ–º:
    lang -> ru -> uk -> en.
    """
    for k in (lang, "ru", "uk", "en"):
        d = ACHIEVEMENTS_TEXTS.get(k, {})
        if code in d:
            return d[code]
    return None


def _code_exists_anywhere(code: str) -> bool:
    """–ï—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π –∫–æ–¥ —Ö–æ—Ç—è –±—ã –≤ –æ–¥–Ω–æ–º —è–∑—ã–∫–µ."""
    return any(code in d for d in ACHIEVEMENTS_TEXTS.values())


# ----------------- public API -----------------

async def grant_achievement(user_id: int, code: str, bot=None):
    """
    –í—ã–¥–∞–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –æ–Ω–æ –µ—â—ë –Ω–µ –±—ã–ª–æ –≤—ã–¥–∞–Ω–æ.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –Ω–∞—á–∏—Å–ª—è–µ—Ç XP.
    """
    logger.info(f"[ACHIEVEMENT] –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–¥–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ {code} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

    if not _code_exists_anywhere(code):
        logger.warning(f"[ACHIEVEMENT] –ö–æ–¥ {code} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ ACHIEVEMENTS_TEXTS –Ω–∏ –≤ –æ–¥–Ω–æ–º —è–∑—ã–∫–µ")
        return False

    new_id = await database.fetch_val(
        """
        INSERT INTO achievements (user_id, code)
        VALUES (:user_id, :code)
        ON CONFLICT DO NOTHING
        RETURNING id
        """,
        {"user_id": user_id, "code": code}
    )

    # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–∫–æ–Ω—Ñ–ª–∏–∫—Ç), —Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    if not new_id:
        logger.info(f"[ACHIEVEMENT] –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ {code} —É–∂–µ –±—ã–ª–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return False

    logger.info(f"[ACHIEVEMENT] –ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ {code} –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

    # –ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if bot:
        lang = await _get_user_lang(user_id)
        header = HEADERS.get(lang) or HEADERS.get("ru") or "üèÜ Achievement:"
        text = _get_text_for(code, lang) or code  # –Ω–∞ –≤—Å—è–∫–∏–π
        try:
            await bot.send_message(
                user_id,
                f"{header}\n<b>{text}</b>",
                parse_mode="HTML"
            )
            logger.info(f"[ACHIEVEMENT] –°–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ {code} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        except Exception as e:
            logger.warning(f"[ACHIEVEMENT] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ XP –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
        try:
            from services.profile.xp_service import xp_for_achievement
            await xp_for_achievement(user_id, bot)
            logger.info(f"[ACHIEVEMENT] –ù–∞—á–∏—Å–ª–µ–Ω–æ XP –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ {code} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        except Exception as e:
            logger.warning(f"[ACHIEVEMENT] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∏—Å–ª–∏—Ç—å XP –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ {code}: {e}")

    return True


async def check_and_grant(user_id: int, event_type: str, value: int, bot=None):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –±—ã–ª–æ –≤—ã–¥–∞–Ω–æ –≤–ø–µ—Ä–≤—ã–µ,
    –∏ False, –µ—Å–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ.
    """
    logger.info(f"[ACHIEVEMENT] –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: user_id={user_id}, event_type={event_type}, value={value}")

    thresholds = {
        "streak": [3, 7, 14, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100],
        "habit_create": [1, 5, 10],
        "habit_complete": [1, 5, 10, 25],
        "habit_done": [10, 30, 50, 70, 90, 110],
        "challenge_create": [1, 5, 10],
        "challenge_done": [1, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50],
        "active_days": [1, 10, 25, 40, 60, 80, 110, 140, 170, 200, 230, 260, 290, 320, 350, 380, 410, 440, 470, 500, 530, 560, 590, 620, 650, 680, 710, 740, 770, 800, 830, 860, 890, 920, 950, 980, 1000],
        "invite": [1, 3, 5, 10, 25],
        "league": [2, 3, 4, 5, 6, 7, 8, 9, 10],
    }

    if event_type not in thresholds:
        logger.warning(f"[ACHIEVEMENT] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è: {event_type}")
        return False

    for t in thresholds[event_type]:
        if value == t:  # —Ä–æ–≤–Ω–æ –¥–æ—Å—Ç–∏–≥–ª–∏ –ø–æ—Ä–æ–≥–∞
            code = f"{event_type}_{t}"
            logger.info(f"[ACHIEVEMENT] –ü–æ—Ä–æ–≥ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç: {code} –¥–ª—è user_id={user_id}")

            # –í—ã–¥–∞—ë–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ (–±–µ–∑ —Å–∞–º–æ–≤—ã–∑–æ–≤–∞ –∏–∑ handlers.achievements)
            result = await grant_achievement(user_id, code, bot)

            if result:
                logger.info(f"[ACHIEVEMENT] –ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –≤—ã–¥–∞–Ω–æ: {code} –¥–ª—è user_id={user_id}")
            else:
                logger.info(f"[ACHIEVEMENT] –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ {code} —É–∂–µ –µ—Å—Ç—å —É user_id={user_id}")

            return result

    logger.debug(f"[ACHIEVEMENT] –ù–µ—Ç –ø–æ—Ä–æ–≥–æ–≤ –¥–ª—è –≤—ã–¥–∞—á–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ event_type={event_type} –∏ value={value}")
    return False
