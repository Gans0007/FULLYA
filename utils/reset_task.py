import asyncio
from datetime import datetime, timedelta
import pytz
from aiogram import Bot
from config import BOT_TOKEN
from pathlib import Path
import logging

from repositories.users.user_repo import get_all_users_with_active_habits
from repositories.habits.habit_reset_repo import reset_unconfirmed_habits, reset_unconfirmed_challenges
from handlers.texts.notifications_texts import HABIT_RESET_MESSAGES, CHALLENGE_RESET_MESSAGES, HABIT_MISS_WARN_MESSAGES, CHALLENGE_MISS_WARN_MESSAGES
from db.db import database

RESET_FILE_PATH = Path(__file__).resolve().parent / "last_reset.txt"

logger = logging.getLogger(__name__)

def get_last_reset_date():
    if RESET_FILE_PATH.exists():
        return RESET_FILE_PATH.read_text().strip()
    return ""

def update_last_reset_date(date_str):
    RESET_FILE_PATH.write_text(date_str)

async def perform_reset(bot: Bot):
    """
    –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ –æ–∫–æ–ª–æ 00:00 Europe/Kyiv.
    –ü—Ä–∞–≤–∏–ª–∞:
      - –ü–µ—Ä–≤—ã–π –ø—Ä–æ–ø—É—Å–∫ (–≤—á–µ—Ä–∞) ‚Üí –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ (–ù–ï –∞–Ω–Ω—É–ª–∏—Ä—É–µ–º)
      - –í—Ç–æ—Ä–æ–π –ø–æ–¥—Ä—è–¥ –ø—Ä–æ–ø—É—Å–∫ ‚Üí –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ + —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      - –ï—Å–ª–∏ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –Ω–µ—Ç –≤–æ–æ–±—â–µ ‚Üí –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π –æ—Ç—á—ë—Ç ¬´–≤—Å—ë –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ¬ª
    """
    user_ids = await get_all_users_with_active_habits()
    logging.info("[RESET] —Å—Ç–∞—Ä—Ç –Ω–æ—á–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–¥–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π=%d", len(user_ids))

    total_first_all = 0
    total_drop_all = 0
    total_all_clear = 0

    def _fmt(names):
        # –ê–∫–∫—É—Ä–∞—Ç–Ω–æ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è/–ª–æ–≥–æ–≤
        # (—á—Ç–æ–±—ã –Ω–µ —Ä–∞–∑–¥—É–≤–∞—Ç—å –ª–æ–≥–∏, –æ–≥—Ä–∞–Ω–∏—á–∏–º –¥–æ 10 –ø—É–Ω–∫—Ç–æ–≤)
        if not names:
            return ""
        names = list(names)
        if len(names) > 10:
            shown = ", ".join(f"¬´{n}¬ª" for n in names[:10])
            return f"{shown} –∏ –µ—â—ë {len(names) - 10}‚Ä¶"
        return ", ".join(f"¬´{n}¬ª" for n in names)

    for user_id in user_ids:
        try:
            # –ü—Ä–∏–≤—ã—á–∫–∏
            fm_habits, dr_habits = await reset_unconfirmed_habits(user_id)
            # –ß–µ–ª–ª–µ–Ω–¥–∂–∏
            fm_chals,  dr_chals  = await reset_unconfirmed_challenges(user_id)

            total_first = len(fm_habits) + len(fm_chals)
            total_drop  = len(dr_habits) + len(dr_chals)
            total_first_all += total_first
            total_drop_all  += total_drop

            logging.info(
                "[RESET] user_id=%s first_miss=%d dropped=%d | fm_habits=[%s] fm_chals=[%s] dr_habits=[%s] dr_chals=[%s]",
                user_id,
                total_first, total_drop,
                _fmt(fm_habits), _fmt(fm_chals),
                _fmt(dr_habits), _fmt(dr_chals),
            )

            # 1) –ú—è–≥–∫–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ ‚Äî –ø–µ—Ä–≤—ã–π –ø—Ä–æ–ø—É—Å–∫ (–ù–ï –∞–Ω–Ω—É–ª–∏—Ä—É–µ–º)
            if fm_habits or fm_chals:
                parts = []
                if fm_habits:
                    parts.append("‚Ä¢ –ü—Ä–∏–≤—ã—á–∫–∏: " + _fmt(fm_habits))
                if fm_chals:
                    parts.append("‚Ä¢ –ß–µ–ª–ª–µ–Ω–¥–∂–∏: " + _fmt(fm_chals))

                text = (
                    "‚ö†Ô∏è –¢—ã –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≤—á–µ—Ä–∞.\n"
                    "–ü–µ—Ä–≤—ã–π –ø—Ä–æ–ø—É—Å–∫ –Ω–µ –∞–Ω–Ω—É–ª–∏—Ä—É–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å ‚Äî –≤—Å—è–∫–æ–µ –±—ã–≤–∞–µ—Ç.\n"
                    "–ù–æ —Å–µ–≥–æ–¥–Ω—è –Ω—É–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å —Å—Ç—Ä–∏–∫ –∑–∞–≤—Ç—Ä–∞!\n\n"
                    + "\n".join(parts)
                )
                try:
                    await bot.send_message(user_id, text)
                except Exception as e:
                    logging.warning("[RESET] send first_miss failed user_id=%s: %r", user_id, e)

            # 2) –ñ—ë—Å—Ç–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ‚Äî –≤—Ç–æ—Ä–æ–π –ø–æ–¥—Ä—è–¥ –ø—Ä–æ–ø—É—Å–∫ (–ø—Ä–æ–≥—Ä–µ—Å—Å —É–∂–µ –æ–±–Ω—É–ª—ë–Ω)
            if dr_habits or dr_chals:
                parts = []
                if dr_habits:
                    parts.append("‚Ä¢ –ü—Ä–∏–≤—ã—á–∫–∏: " + _fmt(dr_habits))
                if dr_chals:
                    parts.append("‚Ä¢ –ß–µ–ª–ª–µ–Ω–¥–∂–∏: " + _fmt(dr_chals))

                text = (
                    "‚ùå –î–≤–∞ –¥–Ω—è –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ‚Äî –ø—Ä–æ–≥—Ä–µ—Å—Å –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω.\n"
                    "–ù–∞—á–∏–Ω–∞–π –∑–∞–Ω–æ–≤–æ –∏ –¥–µ—Ä–∂–∏ —Ä–∏—Ç–º. –¢—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è.\n\n"
                    + "\n".join(parts)
                )
                try:
                    await bot.send_message(user_id, text)
                except Exception as e:
                    logging.warning("[RESET] send dropped failed user_id=%s: %r", user_id, e)

            # 3) –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π –æ—Ç—á—ë—Ç ‚Äî –≤—Å—ë –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ (–Ω–∏ –ø—Ä–æ–ø—É—Å–∫–æ–≤, –Ω–∏ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∏–π)
            if not (fm_habits or dr_habits or fm_chals or dr_chals):
                total_all_clear += 1
                ok_text = (
                    "‚úÖ –í—Å–µ –ø—Ä–∏–≤—ã—á–∫–∏ –∏ —á–µ–ª–ª–µ–Ω–¥–∂–∏ –±—ã–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã –≤—á–µ—Ä–∞.\n"
                    "–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –Ω–∞ –º–µ—Å—Ç–µ ‚Äî –¥–µ—Ä–∂–∏–º —Ç–µ–º–ø! üí™üî•"
                )
                try:
                    await bot.send_message(user_id, ok_text)
                except Exception as e:
                    logging.warning("[RESET] send all_clear failed user_id=%s: %r", user_id, e)

        except Exception as e:
            # –õ–æ–≤–∏–º –ª—é–±—ã–µ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ—Å—Ç–∏ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —é–∑–µ—Ä—É, —á—Ç–æ–±—ã –Ω–µ —É—Ä–æ–Ω–∏—Ç—å –≤–µ—Å—å –Ω–æ—á–Ω–æ–π –ø—Ä–æ—Ö–æ–¥
            logging.exception("[RESET] –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ user_id=%s: %r", user_id, e)

    logging.info(
        "[RESET] —Ñ–∏–Ω–∞–ª –Ω–æ—á–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–¥–∞: –≤—Å–µ–≥–æ_first_miss=%d, –≤—Å–µ–≥–æ_dropped=%d, all_clear=%d, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π=%d",
        total_first_all, total_drop_all, total_all_clear, len(user_ids)
    )



async def start_reset_scheduler(bot: Bot):
    """
    –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–±—Ä–æ—Å–∞: –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –¢–û–õ–¨–ö–û –≤ 00:00 –ø–æ –ö–∏–µ–≤—É.
    –ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞ –Ω–∏–∫–∞–∫–æ–≥–æ —Å–±—Ä–æ—Å–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è.
    """
    tz = pytz.timezone("Europe/Kyiv")

    while True:
        now = datetime.now(tz)
        # –±–ª–∏–∂–∞–π—à–∞—è –ø–æ–ª–Ω–æ—á—å
        next_reset = (now + timedelta(days=1)).replace(hour=0, minute=0, second=0, microsecond=0)

        sleep_time = (next_reset - now).total_seconds()
        logging.info(f"[RESET] –°–µ–π—á–∞—Å {now.strftime('%Y-%m-%d %H:%M:%S')}, –∑–∞—Å—ã–ø–∞—é –¥–æ –ø–æ–ª—É–Ω–æ—á–∏ ({next_reset.strftime('%Y-%m-%d %H:%M:%S')})")

        if sleep_time > 0:
            await asyncio.sleep(sleep_time)

        logging.info("[RESET] –ü—Ä–æ—Å–Ω—É–ª—Å—è –≤ –ø–æ–ª–Ω–æ—á—å, –≥–æ—Ç–æ–≤–ª—é—Å—å –∫ —Å–±—Ä–æ—Å—É‚Ä¶")
        await asyncio.sleep(5)  # –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏

        # –∑–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–æ–≤
        today_str = datetime.now(tz).date().isoformat()
        last_reset = get_last_reset_date()
        if last_reset != today_str:
            logging.info(f"[RESET] –í—ã–ø–æ–ª–Ω—è—é —Å–±—Ä–æ—Å –ø—Ä–∏–≤—ã—á–µ–∫/—á–µ–ª–ª–µ–Ω–¥–∂–µ–π –∑–∞ {today_str}")
            await perform_reset(bot)
            logging.info(f"[RESET] –°–±—Ä–æ—Å –∑–∞–≤–µ—Ä—à—ë–Ω –∑–∞ {today_str}")
        else:
            logging.info(f"[RESET] –°–±—Ä–æ—Å –∑–∞ {today_str} —É–∂–µ –±—ã–ª –≤—ã–ø–æ–ª–Ω–µ–Ω —Ä–∞–Ω–µ–µ, –ø—Ä–æ–ø—É—Å–∫–∞—é")

